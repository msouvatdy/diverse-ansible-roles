---
- name: update all package
  apt:
    name: "*"
    state: latest
    update_cache: yes

- name: Adding k8s.conf in /etc/modules-load.d
  copy:
    src: "{{ role_path }}/files/k8s.conf-modules-load"
    dest: /etc/modules-load.d/k8s.conf

- name: Adding k8s.conf in /etc/sysctl.d/
  copy:
    src: "{{ role_path }}/files/k8s.conf-sysctl"
    dest: /etc/sysctl.d/k8s.conf
  register: k8s_conf

- name: reload sysctl
  command: sysctl --system
  when: k8s_conf.changed

- name: check if SWAP is on
  command: swapon -s
  register: swap
  changed_when: false

- name: Disable SWAP since kubernetes can't work with swap enabled (1/2)
  command: swapoff -a
  when: swap.stdout != ""

- name: Disable SWAP in fstab since kubernetes can't work with swap enabled (2/2)
  replace:
    path: /etc/fstab
    regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
    replace: '# \1'

- name: verify if containerd is installed
  service:
    name: containerd
    state: started
  ignore_errors: true
  register: containerd_installed

- name: Download and unarchive containerd  
  ansible.builtin.unarchive:
    src: "https://github.com/containerd/containerd/releases/download/v{{ containerd_version }}/containerd-{{ containerd_version }}-{{ os }}-{{ architecture }}.tar.gz"
    dest: /usr/local
    remote_src: yes
  when: containerd_installed.failed == true

- name: create /usr/local/lib/systemd/system 
  file:
    path: /usr/local/lib/systemd/system
    state: directory

- name: create containerd.service
  get_url:
    url: "{{ containerd_service }}"
    dest: /usr/local/lib/systemd/system/

- name: Force systemd to reread configs and enable containerd
  ansible.builtin.systemd:
    daemon_reload: true
    name: containerd
    state: started
    enabled: true

- name: Check if runc is installed
  file:
    path: /usr/local/sbin/runc
    state: file
  ignore_errors: true
  register: runc

- name: Download and unarchive runc
  get_url:
    url: "https://github.com/opencontainers/runc/releases/download/{{ version_runc }}/runc.{{ architecture }}"
    dest: /tmp/
  when: runc.failed == true

- name: copy runc binary to /usr/local/sbin
  copy:
    src: "/tmp/runc.{{ architecture }}"
    dest: /usr/local/sbin/runc
    mode: '0755'
    remote_src: yes
  when: runc.failed == true

- name: Remove runc archive 
  file:
    path: "/tmp/runc.{{ architecture }}"
    state: absent
  when: runc.failed == true

- name: install packages apt-transport-https ca-certificates curl
  apt:
    name:
    - apt-transport-https 
    - ca-certificates 
    - curl
    state: present

- name: Add an Apt signing key https://dl.k8s.io/apt/doc/apt-key.gpg
  ansible.builtin.apt_key:
    url: https://dl.k8s.io/apt/doc/apt-key.gpg
    #url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    #url: https://web.archive.org/web/20230223152417if_/https://packages.cloud.google.com/apt/doc/apt-key.gpg 
    state: present
    keyring: /usr/share/keyrings/cloud.google.gpg

- name: add kubernetes source
  lineinfile:
    path: /etc/apt/sources.list.d/kubernetes.list
    state: present
    line: "deb https://apt.kubernetes.io/ kubernetes-xenial main"
    create: yes

- name: install kubelet kubeadm kubectl
  apt:
    name:
    - "kubelet={{ kubelet_ver }}"
    - "kubeadm={{ kubeadm_ver }}"
    - "kubectl={{ kubectl_ver }}"
    state: present
    update_cache: yes

- name: hold kubeadm, kubelet and kubectl
  dpkg_selections:
    name: "{{ item}}" 
    selection: hold
  loop:
  - kubeadm
  - kubelet
  - kubectl